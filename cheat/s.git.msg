"Always write commit messages as if you are explaining the change to a colleague sitting next to you who has no idea of whatâ€™s going on."

* Why is this change necessary?
* How does it address the issue?
* What side effects does this change have?
* Consider including a link [to the discussion].

---

References:

* http://robots.thoughtbot.com/post/48933156625/5-useful-tips-for-a-better-commit-message
* http://rakeroutes.com/blog/deliberate-git/

Guidelines: Subject

  * Present Tense
  * Command

Guidelines: Body

  * Can be informal
  * Describe Why?
  * Are messages to your team

Guidelines: General

  * What the code change does
  * Why the change is necessary
  * Alternatives considered
  * Potential Consequences

Example:

  Introduce a red/black tree to increase search speed

  * Remove <troublesome gem X>, which was causing <specific description of issue introduced by gem>

Template:

  Verb, fragment, ticket #number

  * Why
  * Why

## Github

Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: "Fix bug" and not "Fixed
bug."  This convention matches up with commit messages generated by
commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent
